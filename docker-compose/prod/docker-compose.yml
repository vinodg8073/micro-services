#Make changes to run specific to prod environment configurations
services:
  
  rabitmq:
    image: rabbitmq:3.13-management
    hostname: rabitmq
    ports: 
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 10s
      timeout: 5s
      retries: 5  
      start_period: 10s
    extends:                                       
      file: common-config.yml                         
      service: network-deploy-services
  
  configServer:
    build: 
      context: ../../config-server/          # searches for Dockerfile and builds the image and starts the container. So no need to manually run docker build
    container-name: config-server
    ports:
      - "8091:8091"
    depends_on:
      rabitmq:
        condition: service_healthy
    healthcheck:  # instructions to evaluate wheather CS is up with liveness and readiness or not
      test: "curl --fail --silent localhost:8091/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 5  # retries for 5 times with interval of 10 seconds $ wait for 5 seconds internally for the response
      start_period: 10s  # tells to execute health check commadn after 10 seconds
    extends:                                       
      file: common-config.yml                         
      service: base_configs
  
  laboratoryDB:
    image: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=laboratoryDB
    volumes:
      - laboratoryData:/var/lib/postgres/data/
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  lab-user-management:
    image: lab-user-management:0.0.1-SNAPSHOT
    ports:
      - "8081:8081"
    environment:
      SPRING_APPLICATION_NAME: lab-user-management  # reason to add here is defect in SCCS
    extends:                                       
      file: common-config.yml                         
      service: microservice_depends_on_configs
  
  lab-reports:
    #image: vinodg8073/lab_report:v1
    build: 
      context: ../../lab-reports/          # searches for Dockerfile and builds the image and starts the container. So no need to manually run docker build
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: lab-user-management
    extends:                                       
      file: common-config.yml                         
      service: microservice_depends_on_configs

networks:
  laboratory:
    driver: "bridge"

volumes:
  laboratoryData: